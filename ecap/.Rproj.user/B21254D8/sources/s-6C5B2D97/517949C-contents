## Example of how to run the method with the real 538 2018 midterm elections

## Read in the 538 data
x <- read.csv("forecast_results_2018.csv", header=TRUE)

## Read in all the functions and libraries needed (keep this file in the same folder)
source("ECAP Function Script Revision.R", local = T)

## Lets first just look at the classic predictions (538 provides 3 sets)
x_classic <- x[x$version == "lite",]
head(x_classic)

## The next function returns a summary table with standard 
## CI for how well we are doing compared to the naive approach

## The inputs here are:
## (1) p.tilde  - observed probs
## (2) Lower Threshold 1 and Lower Threshold 2 to subset probabilities in the lower bucket
## (3) Upper Threshold 1 and Upper Threshold 2 to subset probabilities in the upper bucket
## (4) Win variable
## (5) Win indicator in the win variable
## (6) Indicator of if the method should estimate theta or set it to 0.

## Example of how this function can be used on the 538 data 
## (this is used to generate table 3 in the paper)
gen_empirical(p.tilde=x_classic$Democrat_WinProbability, 0.1, 0.2, 0.8, 0.9, 
              win_var=x_classic$Democrat_Won, win_id=1, bias_indicator=T)


## If you want to look at our ECAP adjustments, run the function below 
#### The function takes in ####
## (1) The observed probabilities ("p.tilde")
## (2) The binary win variable 
## (3) The indicator of a win inside of the win variable (here 1 means win and 0 means lose)
## (4) An indicator of if theta should be estimated or fixed at 0

## This returns the vector of adjusted ECAP probabilities from a given vector of unadjusted probabilities. 
## The bias is not estimated (bias_indicator = F)
p_ecap <- tweedie_adj(prob_tilde=x_classic$Democrat_WinProbability, 
                       win_var=x_classic$Democrat_Won, win_id=1, bias_indicator = F)

## This returns the vector of adjusted ECAP probabilities from a given vector of unadjusted probabilities. 
## The bias is estimated (bias_indicator = T)
p_ecap2 <- tweedie_adj(prob_tilde=x_classic$Democrat_WinProbability, 
                        win_var=x_classic$Democrat_Won, win_id=1, bias_indicator = T)
probs <- cbind.data.frame(x_classic$Democrat_WinProbability, p_ecap2)
probs <- probs[order(probs$`x_classic$Democrat_WinProbability`),]
